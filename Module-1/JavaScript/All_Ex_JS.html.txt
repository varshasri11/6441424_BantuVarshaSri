<!-- 1 -->
<!DOCTYPE html>
<html>
<head>
    <title>Community Portal</title>
    <style>
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            max-width: 800px;
            margin: 0 auto;
            padding: 20px;
            background-color: #f5f7fa;
            text-align: center;
        }
        .welcome-banner {
            background: linear-gradient(135deg, #4facfe, #00f2fe);
            color: white;
            padding: 30px;
            border-radius: 10px;
            margin-bottom: 30px;
            box-shadow: 0 4px 8px rgba(0,0,0,0.1);
        }
        .loader {
            border: 5px solid #f3f3f3;
            border-top: 5px solid #3498db;
            border-radius: 50%;
            width: 50px;
            height: 50px;
            animation: spin 1s linear infinite;
            margin: 20px auto;
        }
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
    </style>
</head>
<body>
    <div class="welcome-banner">
        <h1>Community Portal</h1>
        <p>Connecting neighbors since 2025</p>
    </div>
    
    <div class="loader" id="loader"></div>
    
    <script>
        console.log("Welcome to the Community Portal");
        
        window.onload = function() {
            document.getElementById('loader').style.display = 'none';
            document.querySelector('.welcome-banner').innerHTML += 
                '<p>Page fully loaded and ready!</p>';
        };
    </script>
</body>
</html>

<!-- 2 -->

<!DOCTYPE html>
<html>
<head>
    <title>Event Registration</title>
    <style>
        body {
            font-family: 'Arial', sans-serif;
            max-width: 600px;
            margin: 0 auto;
            padding: 20px;
            background-color: #f8f9fa;
        }
        .event-card {
            background: white;
            padding: 25px;
            border-radius: 10px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            margin-bottom: 20px;
        }
        .seats-display {
            font-size: 1.2em;
            margin: 15px 0;
            padding: 10px;
            background-color: #e8f4fc;
            border-radius: 5px;
        }
        button {
            background-color: #2ecc71;
            color: white;
            border: none;
            padding: 12px 20px;
            border-radius: 5px;
            cursor: pointer;
            font-size: 16px;
            transition: background-color 0.3s;
        }
        button:hover {
            background-color: #27ae60;
        }
        button:disabled {
            background-color: #95a5a6;
            cursor: not-allowed;
        }
    </style>
</head>
<body>
    <div class="event-card">
        <h2>Event Registration</h2>
        <div id="eventInfo" class="seats-display"></div>
        <button id="registerBtn">Register Now</button>
    </div>

    <script>
        const eventName = "Community Concert";
        const eventDate = "2025-06-10";
        let availableSeats = 50;
        
        function updateDisplay() {
            document.getElementById('eventInfo').innerHTML = 
                `Event: <strong>${eventName}</strong><br>
                Date: ${eventDate}<br>
                Seats available: <span style="color:${availableSeats > 10 ? '#27ae60' : '#e74c3c'}">${availableSeats}</span>`;
                
            document.getElementById('registerBtn').disabled = availableSeats <= 0;
        }
        
        document.getElementById('registerBtn').addEventListener('click', function() {
            if (availableSeats > 0) {
                availableSeats--;
                updateDisplay();
                console.log(`Seats left after registration: ${availableSeats}`);
            }
        });
        
        updateDisplay();
    </script>
</body>
</html>


<!-- 3 -->

<!DOCTYPE html>
<html>
<head>
    <title>Event Management</title>
    <style>
        body {
            font-family: 'Roboto', sans-serif;
            max-width: 800px;
            margin: 0 auto;
            padding: 20px;
            background-color: #f5f5f5;
        }
        .container {
            background: white;
            padding: 25px;
            border-radius: 10px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }
        .event-list {
            margin: 20px 0;
        }
        .event-item {
            padding: 15px;
            border-bottom: 1px solid #eee;
            display: flex;
            justify-content: space-between;
        }
        .event-item:last-child {
            border-bottom: none;
        }
        .status {
            padding: 5px 10px;
            border-radius: 20px;
            font-size: 0.8em;
            font-weight: bold;
        }
        .available {
            background-color: #d4edda;
            color: #155724;
        }
        .full {
            background-color: #f8d7da;
            color: #721c24;
        }
        .error-message {
            color: #dc3545;
            padding: 10px;
            background-color: #f8d7da;
            border-radius: 5px;
            margin: 15px 0;
            display: none;
        }
        select, button {
            padding: 10px 15px;
            margin-right: 10px;
            border-radius: 5px;
            border: 1px solid #ddd;
        }
        button {
            background-color: #007bff;
            color: white;
            border: none;
            cursor: pointer;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>Event Management</h1>
        
        <div class="error-message" id="errorMsg"></div>
        
        <div class="event-list" id="eventList"></div>
        
        <div>
            <select id="eventFilter">
                <option value="all">All Events</option>
                <option value="available">Available Only</option>
            </select>
            <button id="refreshBtn">Refresh Events</button>
        </div>
    </div>

    <script>
        const events = [
            { name: "Community Concert", date: "2025-06-10", capacity: 50, registered: 45 },
            { name: "Art Workshop", date: "2025-06-15", capacity: 20, registered: 20 },
            { name: "Farmers Market", date: "2025-06-20", capacity: 100, registered: 30 }
        ];

        function displayEvents(filter = 'all') {
            const eventList = document.getElementById('eventList');
            eventList.innerHTML = '';
            
            try {
                let filteredEvents = events;
                if (filter === 'available') {
                    filteredEvents = events.filter(event => event.registered < event.capacity);
                    if (filteredEvents.length === 0) {
                        throw new Error("No available events found");
                    }
                }
                
                filteredEvents.forEach(event => {
                    const isAvailable = event.registered < event.capacity;
                    const eventElement = document.createElement('div');
                    eventElement.className = 'event-item';
                    eventElement.innerHTML = `
                        <div>
                            <strong>${event.name}</strong><br>
                            ${event.date} | ${event.registered}/${event.capacity} participants
                        </div>
                        <span class="status ${isAvailable ? 'available' : 'full'}">
                            ${isAvailable ? 'Available' : 'Full'}
                        </span>
                    `;
                    eventList.appendChild(eventElement);
                });
                
                document.getElementById('errorMsg').style.display = 'none';
            } catch (error) {
                document.getElementById('errorMsg').textContent = error.message;
                document.getElementById('errorMsg').style.display = 'block';
            }
        }
        
        document.getElementById('eventFilter').addEventListener('change', function() {
            displayEvents(this.value);
        });
        
        document.getElementById('refreshBtn').addEventListener('click', function() {
            // Simulate updating event data
            events.forEach(event => {
                event.registered += Math.floor(Math.random() * 5) - 2;
                if (event.registered < 0) event.registered = 0;
            });
            displayEvents(document.getElementById('eventFilter').value);
        });
        
        // Initial display
        displayEvents();
    </script>
</body>
</html>


<!-- 4 -->

<!DOCTYPE html>
<html>
<head>
    <title>Event Management</title>
    <style>
        body {
            font-family: 'Arial', sans-serif;
            max-width: 800px;
            margin: 0 auto;
            padding: 20px;
            background-color: #f5f7fa;
        }
        .container {
            background: white;
            padding: 25px;
            border-radius: 10px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }
        .function-card {
            background-color: #e8f4fc;
            padding: 15px;
            border-radius: 8px;
            margin: 15px 0;
        }
        button {
            background-color: #4a6fa5;
            color: white;
            border: none;
            padding: 10px 15px;
            border-radius: 5px;
            cursor: pointer;
            margin: 5px;
        }
        .output {
            background-color: #f8f9fa;
            padding: 10px;
            border-radius: 5px;
            margin-top: 10px;
            font-family: monospace;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>Event Functions</h1>
        
        <div class="function-card">
            <h3>Add Event</h3>
            <button onclick="demoAddEvent()">Create Music Event</button>
            <div class="output" id="addEventOutput"></div>
        </div>
        
        <div class="function-card">
            <h3>Register User</h3>
            <button onclick="demoRegisterUser()">Register User</button>
            <div class="output" id="registerOutput"></div>
        </div>
        
        <div class="function-card">
            <h3>Category Tracker (Closure)</h3>
            <button onclick="demoTracker()">Track Music Category</button>
            <div class="output" id="trackerOutput"></div>
        </div>
    </div>

    <script>
        // Core functions
        function addEvent(name, category) {
            return { name, category };
        }

        function registerUser(user, event) {
            return `${user} registered for ${event.name}`;
        }

        function filterEventsByCategory(events, category) {
            return events.filter(e => e.category === category);
        }

        // Closure example
        function categoryTracker() {
            let total = 0;
            return function() {
                total++;
                return `Music events tracked: ${total}`;
            };
        }
        const trackMusic = categoryTracker();

        // Demo functions
        function demoAddEvent() {
            const event = addEvent("Summer Festival", "Music");
            document.getElementById('addEventOutput').innerHTML = 
                `Created event: ${JSON.stringify(event)}`;
        }

        function demoRegisterUser() {
            const event = addEvent("Community Workshop", "Education");
            const message = registerUser("Sarah Johnson", event);
            document.getElementById('registerOutput').innerHTML = message;
        }

        function demoTracker() {
            document.getElementById('trackerOutput').innerHTML = trackMusic();
        }
    </script>
</body>
</html>



<!-- 5 -->

<!DOCTYPE html>
<html>
<head>
    <title>Event Objects</title>
    <style>
        body {
            font-family: 'Roboto', sans-serif;
            max-width: 800px;
            margin: 0 auto;
            padding: 20px;
            background-color: #f8f9fa;
        }
        .event-card {
            background: white;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 2px 5px rgba(0,0,0,0.1);
            margin: 15px 0;
        }
        .availability {
            display: inline-block;
            padding: 5px 10px;
            border-radius: 20px;
            font-weight: bold;
            margin-top: 10px;
        }
        .available {
            background-color: #d4edda;
            color: #155724;
        }
        .unavailable {
            background-color: #f8d7da;
            color: #721c24;
        }
        button {
            background-color: #2c3e50;
            color: white;
            border: none;
            padding: 8px 15px;
            border-radius: 5px;
            margin-top: 10px;
            cursor: pointer;
        }
    </style>
</head>
<body>
    <div class="event-card">
        <h2 id="eventName">Event Name</h2>
        <p id="eventDate">Date: </p>
        <p id="eventSeats">Seats: </p>
        <div id="availability" class="availability"></div>
        <button onclick="checkAvail()">Check Availability</button>
        <button onclick="showEntries()">Show Object Entries</button>
    </div>

    <script>
        function Event(name, date, seats) {
            this.name = name;
            this.date = date;
            this.seats = seats;
        }

        Event.prototype.checkAvailability = function() {
            return this.seats > 0;
        };

        // Create event instance
        const concert = new Event("Rock Night", "2025-08-20", 20);
        
        // Display event info
        document.getElementById('eventName').textContent = concert.name;
        document.getElementById('eventDate').textContent += concert.date;
        document.getElementById('eventSeats').textContent += concert.seats;
        
        function checkAvail() {
            const isAvailable = concert.checkAvailability();
            const availElement = document.getElementById('availability');
            availElement.textContent = isAvailable ? "Available" : "Sold Out";
            availElement.className = isAvailable ? "availability available" : "availability unavailable";
        }
        
        function showEntries() {
            alert("Object entries:\n" + 
                JSON.stringify(Object.entries(concert), null, 2));
        }
    </script>
</body>
</html>


<!-- 6 -->

<!DOCTYPE html>
<html>
<head>
    <title>Event Array Methods</title>
    <style>
        body {
            font-family: 'Open Sans', sans-serif;
            max-width: 800px;
            margin: 0 auto;
            padding: 20px;
            background-color: #f0f2f5;
        }
        .array-methods {
            background: white;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 2px 8px rgba(0,0,0,0.1);
        }
        .event-card {
            background-color: #e8f4fc;
            padding: 15px;
            border-radius: 6px;
            margin: 10px 0;
        }
        .music-event {
            border-left: 4px solid #3498db;
        }
        .wellness-event {
            border-left: 4px solid #2ecc71;
        }
        .art-event {
            border-left: 4px solid #9b59b6;
        }
        button {
            background-color: #3498db;
            color: white;
            border: none;
            padding: 8px 15px;
            border-radius: 4px;
            margin: 5px;
            cursor: pointer;
        }
    </style>
</head>
<body>
    <div class="array-methods">
        <h1>Event Array Methods</h1>
        <button onclick="addEvent()">Add Art Show</button>
        <button onclick="filterMusic()">Filter Music Events</button>
        <button onclick="displayCards()">Display Event Cards</button>
        
        <div id="eventsContainer"></div>
        <div id="filteredContainer"></div>
        <div id="cardsContainer"></div>
    </div>

    <script>
        let events = [
            { name: "Yoga Workshop", category: "Wellness" },
            { name: "Live Concert", category: "Music" }
        ];

        function addEvent() {
            events.push({ name: "Art Show", category: "Art" });
            displayEvents();
            console.log("Added Art Show:", events);
        }

        function filterMusic() {
            const musicEvents = events.filter(e => e.category === "Music");
            const container = document.getElementById('filteredContainer');
            container.innerHTML = "<h3>Music Events:</h3>";
            
            musicEvents.forEach(event => {
                const div = document.createElement('div');
                div.className = 'event-card music-event';
                div.textContent = event.name;
                container.appendChild(div);
            });
        }

        function displayCards() {
            const cards = events.map(e => 
                `<div class="event-card ${e.category.toLowerCase()}-event">
                    ${e.name} - ${e.category}
                </div>`
            );
            document.getElementById('cardsContainer').innerHTML = 
                "<h3>All Events:</h3>" + cards.join('');
        }

        function displayEvents() {
            document.getElementById('eventsContainer').innerHTML = 
                "<h3>Current Events:</h3><pre>" + 
                JSON.stringify(events, null, 2) + "</pre>";
        }

        // Initial display
        displayEvents();
    </script>
</body>
</html>




<!-- 7 -->

<!DOCTYPE html>
<html>
<head>
    <title>Event DOM Manipulation</title>
    <style>
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            max-width: 800px;
            margin: 0 auto;
            padding: 20px;
            background-color: #f8f9fa;
        }
        #eventList {
            margin: 20px 0;
        }
        .event-card {
            background: white;
            padding: 15px;
            border-radius: 6px;
            margin: 10px 0;
            box-shadow: 0 1px 3px rgba(0,0,0,0.1);
            transition: transform 0.2s;
        }
        .event-card:hover {
            transform: translateY(-2px);
        }
        #status {
            padding: 10px;
            background-color: #e8f4fc;
            border-radius: 4px;
            margin: 15px 0;
        }
        button {
            background-color: #4a6fa5;
            color: white;
            border: none;
            padding: 10px 15px;
            border-radius: 4px;
            cursor: pointer;
        }
    </style>
</head>
<body>
    <h1>Event DOM Manipulation</h1>
    <button onclick="loadEvents()">Load Events</button>
    <button onclick="updateStatus()">Update Status</button>
    
    <div id="status">Ready to load events...</div>
    <div id="eventList"></div>

    <script>
        const events = [
            { name: "Community Cleanup", category: "Volunteer" },
            { name: "Jazz Night", category: "Music" },
            { name: "Cooking Class", category: "Workshop" }
        ];

        function loadEvents() {
            const eventList = document.querySelector("#eventList");
            eventList.innerHTML = '';
            
            events.forEach(event => {
                const card = document.createElement("div");
                card.className = "event-card";
                card.innerHTML = `
                    <h3>${event.name}</h3>
                    <p>Category: ${event.category}</p>
                `;
                eventList.appendChild(card);
            });
            
            updateUI(`${events.length} events loaded`);
        }

        function updateUI(message) {
            document.querySelector("#status").textContent = message;
        }

        function updateStatus() {
            updateUI(`Last updated: ${new Date().toLocaleTimeString()}`);
        }
    </script>
</body>
</html>


<!-- 8 -->

<!DOCTYPE html>
<html>
<head>
    <title>Event Handling</title>
    <style>
        body {
            font-family: 'Arial', sans-serif;
            max-width: 600px;
            margin: 0 auto;
            padding: 20px;
            background-color: #f5f7fa;
        }
        .event-controls {
            background: white;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 2px 8px rgba(0,0,0,0.1);
        }
        select, input, button {
            padding: 10px;
            margin: 10px 0;
            width: 100%;
            border: 1px solid #ddd;
            border-radius: 4px;
        }
        button {
            background-color: #3498db;
            color: white;
            border: none;
            cursor: pointer;
            font-weight: bold;
        }
        button:hover {
            background-color: #2980b9;
        }
        .log {
            margin-top: 20px;
            padding: 15px;
            background-color: #f8f9fa;
            border-radius: 4px;
            font-family: monospace;
        }
    </style>
</head>
<body>
    <div class="event-controls">
        <h2>Event Registration</h2>
        
        <select id="categoryFilter">
            <option value="">Select Category</option>
            <option value="Music">Music</option>
            <option value="Workshop">Workshop</option>
            <option value="Volunteer">Volunteer</option>
        </select>
        
        <input type="text" id="searchBox" placeholder="Search events...">
        
        <button id="registerBtn">Register</button>
        
        <div class="log" id="eventLog"></div>
    </div>

    <script>
        function logEvent(message) {
            const logElement = document.getElementById('eventLog');
            logElement.innerHTML += `<div>${new Date().toLocaleTimeString()}: ${message}</div>`;
            logElement.scrollTop = logElement.scrollHeight;
        }

        document.getElementById("registerBtn").onclick = () => {
            logEvent("Registration button clicked!");
            alert("Registered successfully!");
        };

        document.getElementById("categoryFilter").onchange = function() {
            logEvent(`Category selected: ${this.value}`);
        };

        document.getElementById("searchBox").addEventListener("input", e => {
            if (e.target.value.length > 2) {
                logEvent(`Searching for: "${e.target.value}"`);
            }
        });
    </script>
</body>
</html>


<!-- 9 -->

<!DOCTYPE html>
<html>
<head>
    <title>Async Events</title>
    <style>
        body {
            font-family: 'Roboto', sans-serif;
            max-width: 800px;
            margin: 0 auto;
            padding: 20px;
            background-color: #f8f9fa;
        }
        .async-container {
            background: white;
            padding: 25px;
            border-radius: 10px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            text-align: center;
        }
        #spinner {
            border: 4px solid rgba(0, 0, 0, 0.1);
            border-radius: 50%;
            border-top: 4px solid #3498db;
            width: 40px;
            height: 40px;
            animation: spin 1s linear infinite;
            margin: 20px auto;
            display: none;
        }
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
        #eventsData {
            text-align: left;
            margin-top: 20px;
            padding: 15px;
            background-color: #e8f4fc;
            border-radius: 6px;
            font-family: monospace;
            display: none;
        }
        button {
            background-color: #2c3e50;
            color: white;
            border: none;
            padding: 12px 20px;
            border-radius: 6px;
            cursor: pointer;
            font-size: 16px;
        }
    </style>
</head>
<body>
    <div class="async-container">
        <h1>Async Event Data</h1>
        <p>Fetch event data using different async patterns</p>
        
        <button onclick="fetchWithThen()">Fetch with .then()</button>
        <button onclick="fetchWithAsync()">Fetch with async/await</button>
        
        <div id="spinner"></div>
        <div id="eventsData"></div>
    </div>

    <script>
        // Mock API function
        function mockFetchEvents() {
            return new Promise((resolve) => {
                setTimeout(() => {
                    resolve({
                        data: [
                            { id: 1, name: "Summer Festival", date: "2025-07-15" },
                            { id: 2, name: "Tech Conference", date: "2025-08-20" }
                        ]
                    });
                }, 1500);
            });
        }

        function fetchWithThen() {
            document.getElementById('spinner').style.display = 'block';
            document.getElementById('eventsData').style.display = 'none';
            
            mockFetchEvents()
                .then(response => {
                    document.getElementById('eventsData').innerHTML = 
                        JSON.stringify(response.data, null, 2);
                })
                .catch(err => {
                    document.getElementById('eventsData').innerHTML = 
                        `Error: ${err.message}`;
                })
                .finally(() => {
                    document.getElementById('spinner').style.display = 'none';
                    document.getElementById('eventsData').style.display = 'block';
                });
        }

        async function fetchWithAsync() {
            const spinner = document.getElementById('spinner');
            const output = document.getElementById('eventsData');
            
            spinner.style.display = 'block';
            output.style.display = 'none';
            
            try {
                const response = await mockFetchEvents();
                output.innerHTML = JSON.stringify(response.data, null, 2);
            } catch (err) {
                output.innerHTML = `Error: ${err.message}`;
            } finally {
                spinner.style.display = 'none';
                output.style.display = 'block';
            }
        }
    </script>
</body>
</html>


<!-- 10 -->

<!DOCTYPE html>
<html>
<head>
    <title>Modern JavaScript</title>
    <style>
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            max-width: 800px;
            margin: 0 auto;
            padding: 20px;
            background-color: #f5f7fa;
        }
        .feature-card {
            background: white;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 2px 8px rgba(0,0,0,0.1);
            margin-bottom: 20px;
        }
        button {
            background-color: #4a6fa5;
            color: white;
            border: none;
            padding: 10px 15px;
            border-radius: 4px;
            margin: 5px;
            cursor: pointer;
        }
        .output {
            background-color: #f8f9fa;
            padding: 15px;
            border-radius: 6px;
            margin-top: 15px;
            font-family: monospace;
        }
    </style>
</head>
<body>
    <div class="feature-card">
        <h2>Modern JavaScript Features</h2>
        
        <h3>Default Parameters</h3>
        <button onclick="demoDefaultParams()">Greet User</button>
        <div class="output" id="defaultParamOutput"></div>
        
        <h3>Destructuring</h3>
        <button onclick="demoDestructuring()">Destructure Event</button>
        <div class="output" id="destructuringOutput"></div>
        
        <h3>Spread Operator</h3>
        <button onclick="demoSpread()">Clone Events</button>
        <div class="output" id="spreadOutput"></div>
    </div>

    <script>
        // Default parameters
        function greet(name = "Guest") {
            return `Welcome, ${name}!`;
        }

        // Destructuring
        const event = { 
            name: "Community Concert", 
            date: "2025-06-20",
            location: "City Park" 
        };

        // Spread operator
        const events = [
            { name: "Yoga Workshop", category: "Wellness" },
            { name: "Live Concert", category: "Music" }
        ];

        function demoDefaultParams() {
            document.getElementById('defaultParamOutput').innerHTML = 
                `${greet()}<br>${greet("Alice")}`;
        }

        function demoDestructuring() {
            const { name, date } = event;
            document.getElementById('destructuringOutput').innerHTML = 
                `Extracted: ${name} on ${date}`;
        }

        function demoSpread() {
            const originalEvents = [...events];
            originalEvents.push({ name: "Art Show", category: "Art" });
            
            document.getElementById('spreadOutput').innerHTML = 
                `Original: ${JSON.stringify(events)}<br><br>
                 Clone with new event: ${JSON.stringify(originalEvents)}`;
        }
    </script>
</body>
</html>



<!-- 11 -->

<!DOCTYPE html>
<html>
<head>
    <title>Event Registration Form</title>
    <style>
        body {
            font-family: 'Arial', sans-serif;
            max-width: 600px;
            margin: 0 auto;
            padding: 20px;
            background-color: #f5f7fa;
        }
        #regForm {
            background: white;
            padding: 25px;
            border-radius: 8px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }
        .form-group {
            margin-bottom: 20px;
        }
        label {
            display: block;
            margin-bottom: 8px;
            font-weight: bold;
        }
        input, select {
            width: 100%;
            padding: 10px;
            border: 1px solid #ddd;
            border-radius: 4px;
            font-size: 16px;
        }
        button {
            background-color: #2ecc71;
            color: white;
            border: none;
            padding: 12px 20px;
            border-radius: 4px;
            font-size: 16px;
            cursor: pointer;
            width: 100%;
        }
        button:hover {
            background-color: #27ae60;
        }
        .error {
            color: #e74c3c;
            font-size: 14px;
            margin-top: 5px;
        }
    </style>
</head>
<body>
    <form id="regForm">
        <h2>Event Registration</h2>
        
        <div class="form-group">
            <label for="name">Full Name</label>
            <input type="text" id="name" name="name" required>
            <div class="error" id="nameError"></div>
        </div>
        
        <div class="form-group">
            <label for="email">Email</label>
            <input type="email" id="email" name="email" required>
            <div class="error" id="emailError"></div>
        </div>
        
        <div class="form-group">
            <label for="event">Select Event</label>
            <select id="event" name="event">
                <option>Music Fest</option>
                <option>Art Exhibition</option>
                <option>Community Workshop</option>
            </select>
        </div>
        
        <button type="submit">Submit</button>
    </form>

    <script>
        document.getElementById("regForm").addEventListener("submit", function(e) {
            e.preventDefault();
            
            // Clear previous errors
            document.getElementById('nameError').textContent = '';
            document.getElementById('emailError').textContent = '';
            
            const { name, email, event } = this.elements;
            let isValid = true;
            
            if (!name.value) {
                document.getElementById('nameError').textContent = 'Name is required';
                isValid = false;
            }
            
            if (!email.value) {
                document.getElementById('emailError').textContent = 'Email is required';
                isValid = false;
            } else if (!/^\S+@\S+\.\S+$/.test(email.value)) {
                document.getElementById('emailError').textContent = 'Enter a valid email';
                isValid = false;
            }
            
            if (isValid) {
                console.log('Form submitted:', {
                    name: name.value,
                    email: email.value,
                    event: event.value
                });
                alert('Registration successful!');
                this.reset();
            }
        });
    </script>
</body>
</html>



<!-- 12 -->

<!DOCTYPE html>
<html>
<head>
    <title>Event Registration API</title>
    <style>
        body {
            font-family: 'Roboto', sans-serif;
            max-width: 800px;
            margin: 0 auto;
            padding: 20px;
            background-color: #f8f9fa;
        }
        .api-container {
            background: white;
            padding: 25px;
            border-radius: 10px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            text-align: center;
        }
        #spinner {
            border: 4px solid rgba(0, 0, 0, 0.1);
            border-radius: 50%;
            border-top: 4px solid #3498db;
            width: 40px;
            height: 40px;
            animation: spin 1s linear infinite;
            margin: 20px auto;
            display: none;
        }
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
        #apiResponse {
            text-align: left;
            margin-top: 20px;
            padding: 15px;
            background-color: #e8f4fc;
            border-radius: 6px;
            font-family: monospace;
        }
        button {
            background-color: #2c3e50;
            color: white;
            border: none;
            padding: 12px 20px;
            border-radius: 6px;
            cursor: pointer;
            font-size: 16px;
        }
        .success {
            color: #27ae60;
            font-weight: bold;
        }
        .error {
            color: #e74c3c;
            font-weight: bold;
        }
    </style>
</head>
<body>
    <div class="api-container">
        <h1>Event Registration API</h1>
        <p>Register using the Fetch API</p>
        
        <button onclick="registerUser()">Register User</button>
        
        <div id="spinner"></div>
        <div id="apiResponse"></div>
    </div>

    <script>
        async function registerUser() {
            const spinner = document.getElementById('spinner');
            const responseDiv = document.getElementById('apiResponse');
            
            spinner.style.display = 'block';
            responseDiv.innerHTML = '';
            
            const formData = {
                name: "Alex Johnson",
                email: "alex@example.com",
                event: "Music Fest"
            };
            
            try {
                // Using a mock API for demonstration
                const response = await fetch('https://jsonplaceholder.typicode.com/posts', {
                    method: 'POST',
                    headers: { 
                        'Content-Type': 'application/json',
                        'Authorization': 'Bearer mock-token'
                    },
                    body: JSON.stringify(formData)
                });
                
                const data = await response.json();
                
                if (!response.ok) {
                    throw new Error('Registration failed');
                }
                
                // Simulate processing delay
                await new Promise(resolve => setTimeout(resolve, 1000));
                
                responseDiv.innerHTML = 
                    `<span class="success">Registration successful!</span><br><br>
                    <strong>Response:</strong><br>
                    ${JSON.stringify(data, null, 2)}`;
                
            } catch (err) {
                responseDiv.innerHTML = 
                    `<span class="error">Error: ${err.message}</span>`;
            } finally {
                spinner.style.display = 'none';
            }
        }
    </script>
</body>
</html>

<!-- 13 -->

13. Debugging and Testing
1) Open Chrome DevTools > Console to view console.log(), errors.

2) Use Network tab to check fetch request, response status.

3) Set breakpoints in JS file via Sources tab to inspect variables.

4) Log step-by-step inside form submission to trace logic.


<!-- 14 -->

<!DOCTYPE html>
<html>
<head>
    <title>jQuery & Frameworks</title>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <style>
        body {
            font-family: 'Arial', sans-serif;
            max-width: 800px;
            margin: 0 auto;
            padding: 20px;
            background-color: #f5f7fa;
        }
        .framework-container {
            background: white;
            padding: 25px;
            border-radius: 10px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }
        .event-card {
            background-color: #e8f4fc;
            padding: 15px;
            border-radius: 6px;
            margin: 10px 0;
            cursor: pointer;
        }
        button {
            background-color: #3498db;
            color: white;
            border: none;
            padding: 10px 15px;
            border-radius: 4px;
            margin: 5px;
            cursor: pointer;
        }
        #reactInfo, #vueInfo {
            display: none;
            padding: 15px;
            background-color: #f8f9fa;
            border-radius: 6px;
            margin-top: 15px;
        }
    </style>
</head>
<body>
    <div class="framework-container">
        <h1>jQuery & JavaScript Frameworks</h1>
        
        <button id="registerBtn">Register with jQuery</button>
        <button id="toggleEvents">Toggle Events</button>
        <button id="showReact">React Info</button>
        <button id="showVue">Vue Info</button>
        
        <div class="event-card">Community Concert</div>
        <div class="event-card">Art Workshop</div>
        
        <div id="reactInfo">
            <h3>React Benefits:</h3>
            <ul>
                <li>Component-based architecture</li>
                <li>Virtual DOM for performance</li>
                <li>Unidirectional data flow</li>
                <li>Rich ecosystem</li>
            </ul>
        </div>
        
        <div id="vueInfo">
            <h3>Vue Benefits:</h3>
            <ul>
                <li>Progressive framework</li>
                <li>Reactive data binding</li>
                <li>Simple integration</li>
                <li>Flexible and approachable</li>
            </ul>
        </div>
    </div>

    <script>
        // jQuery examples
        $(document).ready(function() {
            $("#registerBtn").click(function() {
                alert("Registered using jQuery!");
            });
            
            $("#toggleEvents").click(function() {
                $(".event-card").fadeToggle();
            });
            
            $("#showReact").click(function() {
                $("#vueInfo").hide();
                $("#reactInfo").fadeIn();
            });
            
            $("#showVue").click(function() {
                $("#reactInfo").hide();
                $("#vueInfo").fadeIn();
            });
        });
        
        // Framework benefits (conceptual)
        console.log("Frameworks provide:");
        console.log("- Component-based architecture");
        console.log("- Reactive data handling");
        console.log("- Virtual DOM for performance");
        console.log("- State management solutions");
    </script>
</body>
</html>